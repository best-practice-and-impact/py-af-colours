---
title: "py_af_colours"
format:
  html:
    toc: true
---

<style>
table, th, td {
  border-bottom: 1px solid grey;
  border-collapse: collapse;
  padding: 6px
}
</style>

[py_af_colours](https://github.com/best-practice-and-impact/py-af-colours)
aims to support the creation of accessible python graphs across the UK Government
Analysis Function by bringing the accessble colour palettes to creators.
The colour palettes have been designed to support visually impaired people
interpret data visualisations by featuring distinct colours with suitable contrasts.

The examples in these docs include other best practices for creating accessible graphs, with the full
guidance available on the Analysis Function [website](https://analysisfunction.civilservice.gov.uk/policy-store/data-visualisation-charts/).

The data used throughout these examples is [provided](https://github.com/best-practice-and-impact/py-af-colours/tree/main/docs/data) in
the required format on the `py_af_colours` repository.

## Requirements
To use `py_af_colours`, your system requires the following:

1. Python 3
2. the `PyYAML` package
3. the [py_af_colours package](https://github.com/best-practice-and-impact/py-af-colours)


## Installing py_af_colours
py_af_colours is on [PyPI](https://pypi.org/project/py-af-colours/). To install it:

1. Open a python terminal, such as Anaconda shell
2. Run:

```{shell}
pip install py_af_colours
```

## Getting the colours
Import the af_colours function:

```{python}
from py_af_colours import af_colours
```

The `af_colours` function takes four arguments: `palette`, `colour_format`,
`number_of_colours`, and `config_path`.


- `palette` is a required parameter, chosen by the user based on the 
[Analysis Function colour guidance](https://analysisfunction.civilservice.gov.uk/policy-store/data-visualisation-colours-in-charts/).
It takes one of four possible string values corresponding to the options:

    - "duo"  
    - "focus"   
    - "sequential"  
    - "categorical"  

- `colour_format` is an optional parameter. It takes one of two possible string values:
    - "hex"; meaning hexadecimal colour code, for example #12436D. "hex" is the default value of colour_format if none is specified.
    - "rgb"; meaning red green blue colour code, for example (18, 67, 109).

- `number_of_colours` is an optional parameter for the categorical palette. It takes an integer value up to 6.

- `config_path` is an optional parameter that links to where the palette values are stored.
It is not recommended for the user to specify a value for this parameter (see Basic usage).
It may be needed if the user moves the config file, or if they require custom values stored elsewhere.

`af_colours()` returns hex codes as a list of strings, and rgb codes as a list of tuples.

## Basic usage

To return the duo colour palette hex codes:
```{python}
af_colours("duo")

```

<br>

To return a five colour categorical palette as rgb codes:
```{python}
af_colours("categorical", "rgb", 5)
```

See also that warnings are given to highlight other accessibility best practice - in this case, to avoid
graphs becoming cluttered.

This lists can be specified as values for colour parameters with graphing packages such as `plotly` and `seaborn`.


## Examples in graphs
### Categorical
This palette is for data which can be divided into groups or categories by using names or labels.

<table style="width:80%">
  <tr>
    <th style="background-color: #D9EDF7">Colour name </th>
    <th style="background-color: #D9EDF7">Hex code </th>
    <th style="background-color: #D9EDF7">RGB code </th>
    <th style="background-color: #D9EDF7">Colour fill </th>
  </tr>
  <tr>
    <td>Dark blue </td>
    <td>#12436D </td>
    <td>(18, 67, 109) </td>
    <td style="background-color: #12436D; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Turquoise </td>
    <td>#28A197 </td>
    <td>(40, 161, 151) </td>
    <td style="background-color: #28A197; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Dark pink </td>
    <td>#801650 </td>
    <td>(128, 22, 80) </td>
    <td style="background-color: #801650; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Orange </td>
    <td>#F46A25 </td>
    <td>(244, 106, 37) </td>
    <td style="background-color: #F46A25; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Dark grey </td>
    <td>#3D3D3D </td>
    <td>(61, 61, 61) </td>
    <td style="background-color: #3D3D3D; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Light purple </td>
    <td>#A285D1 </td>
    <td>(162, 133, 209) </td>
    <td style="background-color: #A285D1; border-bottom: 1px solid white"></td>    
  </tr>
</table>

<br>

#### Figure 1: Bar chart using the Categorical colour palette

![](figures/figure1.svg)

This clustered bar chart uses data based on the <a href="https://www.kaggle.com/datasets/iamsouravbanerjee/world-population-dataset?resource=download">world population dataset</a>.
Each cluster corresponds to a year. Each of the four bars within each cluster represent a country, denoted a distinct colour. The bars are outlined in white to aid with contrast between the bars,
with additional whitespace between the clusters. The legend is presented in the same order as the bars in the clusters.

```{python}
#| eval: false

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from py_af_colours import af_colours

world_population = pd.read_csv("data\world_population_in_billions.csv")
top_four = world_population[0:4]
top_four_data = top_four.set_index("Country/Territory")
years_of_interest  = top_four_data.columns.tolist()[-4:]

categorical = sns.color_palette(af_colours("categorical", "hex", 4))

population_over_time = pd.melt(top_four_data.reset_index(),
                                   id_vars = "Country/Territory",
                                   value_vars = years_of_interest,
                                   var_name = "Year",
                                   value_name = "Population")

fig, ax = plt.subplots()

sns.barplot(x = "Year", y = "Population",
            data = population_over_time,
            zorder = 2, hue = "Country/Territory",
            edgecolor = "white",
            palette = categorical)

plt.box(False)

ax.set_ylabel("Population (Billion)", rotation = 0)
ax.yaxis.set_label_coords(-0.15, 1.05)
plt.grid(visible = True, which = "both", axis = "y", color = "#D6D6D6")
ax.tick_params(color = "#D6D6D6")
ax.set_ylim(bottom = -0.01, top = 1.6)
plt.legend(frameon = False, loc = "upper left", ncol = 4,
            handlelength = 0.7, bbox_to_anchor = (0, 0.62, 0.5, 0.5))

plt.show()
```

</br>

#### Figure 2: Pie chart using the Categorical colour palette

![](figures/figure2.svg)

This a pie chart showing the proportional populations of the four most populous countries. Each country is represented by a distinct colour. Each
slice is outlined in white, and labelled with a sans serif font in black. This data is from the <a href="https://www.kaggle.com/datasets/iamsouravbanerjee/world-population-dataset?resource=download">world population dataset</a>.

```{python}
#| eval: false

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from py_af_colours import af_colours

world_population = pd.read_csv("data\world_population_in_billions.csv")
top_four = world_population[0:4]
top_four_data =top_four.set_index("Country/Territory")
most_recent = top_four_data.iloc[:,-1:]
data = most_recent.reset_index()
countries = top_four["Country/Territory"].values

colours_list = af_colours("categorical", "hex", 4)
categorical = sns.color_palette(colours_list)

percentage_labels = []
for n in np.arange(most_recent.shape[0]):
    percentage = 100 * ((most_recent.iloc[n].values.item())
                    /(most_recent.values.sum().item()))
    value = round(percentage, 1)
    country = str(data["Country/Territory"].iloc[n])
    percentage_labels.append((country + " " + str(value) + "%"))

ax = most_recent.plot.pie(x = "Country/Territory", y = "2022",
                          labels = percentage_labels,
                          legend = False,
                          colors = categorical,
                          pctdistance = 1,
                          counterclock = False,
                          startangle = 90,
                          wedgeprops = {"edgecolor": "white",
                                        "linewidth": 1.5,
                                        "antialiased": True})
ax.set_ylabel(None)
ax.set_title("Population of Four Most Populous Countries in 2022")

plt.show()

```

</br>

### Duo
This palette is for categorical data when there are two categories.

<table style="width:80%">
  <tr>
    <th style="background-color: #D9EDF7">Colour name </th>
    <th style="background-color: #D9EDF7">Hex code </th>
    <th style="background-color: #D9EDF7">RGB code </th>
    <th style="background-color: #D9EDF7">Colour fill </th>
  </tr>
  <tr>
    <td>Dark blue </td>
    <td>#12436D </td>
    <td>(18, 67, 109) </td>
    <td style="background-color: #12436D; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Orange </td>
    <td>#F46A25 </td>
    <td>(244, 106, 37) </td>
    <td style="background-color: #F46A25; border-bottom: 1px solid white"></td>    
  </tr>
</table>

<br>

#### Figure 3: Line chart using the Duo colour palette

![](figures/figure3.svg)

This line chart has two lines, one dark blue and one orange. Each is labelled with black text in a sans serif font. This line chart uses data based on
the <a href="https://www.kaggle.com/datasets/iamsouravbanerjee/world-population-dataset?resource=download">world population dataset</a>.

```{python}
#| eval: false

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from py_af_colours import af_colours

world_population = pd.read_csv("data\world_population_in_billions.csv")
top_two_data = world_population.set_index("Country/Territory")[0:2]

duo = sns.color_palette(af_colours("duo"))

fig, ax = plt.subplots()

sns.lineplot(data = (top_two_data.transpose()), 
                     palette = duo,
                     dashes = False,
                     legend = False)

ax.set_xlabel("Year")
ax.set_ylabel("Population (Billion)", rotation = 0)
ax.yaxis.set_label_coords(-0.15, 1.05)

ax.grid(visible = True, which = "both", axis = "y", color = "#BEBEBE")
ax.set_axisbelow(True)
ax.set_frame_on(False)
ax.tick_params(color = "#D6D6D6")

x_label_coord = len(top_two_data.columns) - 1
y_label_coord1 = top_two_data.values[0][-1] + 0.03
y_label_coord2 = top_two_data.values[1][-1] - 0.05

ax.annotate(" China", xy = (x_label_coord, y_label_coord1))
ax.annotate(" India", xy = (x_label_coord, y_label_coord2))

ax.set_xlim(left = 0, right = len(top_two_data.columns) - 1)
ax.set_ylim(bottom = -0.01, top = 1.6)

plt.tight_layout()
plt.show()

```

<br>


### Sequential
This palette is for data where the order of the data is meaningful, such as for age groups.

<table style="width:80%">
  <tr>
    <th style="background-color: #D9EDF7">Colour name </th>
    <th style="background-color: #D9EDF7">Hex code </th>
    <th style="background-color: #D9EDF7">RGB code </th>
    <th style="background-color: #D9EDF7">Colour fill </th>
  </tr>
  <tr>
    <td>Dark blue </td>
    <td>#12436D </td>
    <td>(18, 67, 109) </td>
    <td style="background-color: #12436D; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Mid blue </td>
    <td>#2073BC </td>
    <td>(32, 115, 188) </td>
    <td style="background-color: #2073BC; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Light blue </td>
    <td>#6BACE6 </td>
    <td>(107, 172, 230) </td>
    <td style="background-color: #6BACE6; border-bottom: 1px solid white"></td>    
  </tr>
</table>

<br>


#### Figure 4: Bar chart using the Sequential colour palette

![](figures/figure4.svg)

This clustered bar chart uses data based on the <a href="https://www.kaggle.com/datasets/elmoallistair/population-by-age-group-2021">population by age dataset</a> and 
shows the population of three age groups for five countries. Each country is labelled along the x axis. The bars within each cluster use the gradient of the sequential palette
to follow the order of age bars going from young to older. The legend is presented at the top left of the graph in the same order as the age-group bars in the bar clusters.
Each bar has a dark blue border and white space in between.

Distinct from previous examples, this example shows how to use an rgb list returned by af_colours. It is generally easier to use hex codes, 
but this example is included for completeness. The end result is the same as using hex codes.

```{python}
#| eval: false

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from py_af_colours import af_colours

world_population_by_age = pd.read_csv("data\population_by_age.csv")
top_five_age = world_population_by_age[0:5]
top_five_age_data = top_five_age.set_index(top_five_age["Country"])
countries = top_five_age["Country"].values

fig, ax = plt.subplots()

x_spacing = np.arange(top_five_age.shape[0])
colours = af_colours("sequential", "rgb")
sequential = [tuple(t / 255 for t in x) for x in colours]

plt.bar(x_spacing - 0.25, top_five_age["Under 25"].values,
        width = 0.19, zorder = 2, edgecolor = sequential[0],
        label = "0 to 25", color = sequential[0])
plt.bar(x_spacing, top_five_age["25-64 years"].values,
        width = 0.19, zorder = 2, edgecolor = sequential[0],
        label = "25 to 64", color=sequential[1])
plt.bar(x_spacing + 0.25, top_five_age["65+"].values,
        width = 0.19, zorder = 2, edgecolor = sequential[0],
        label = "65+", color = sequential[2])

plt.box(False)
plt.grid(visible = True, which = "both", axis = "y", color = "#D6D6D6") 
plt.xticks(x_spacing, top_five_age["Country"].values)
plt.tick_params(color = "white")
ax.set_xlabel("Country")
ax.set_ylabel("Population (Billion)", rotation = 0)
ax.yaxis.set_label_coords(-0.15, 1.05)
ax.set_ylim(top = 0.9)

plt.legend(bbox_to_anchor = (0.025, 0.62, 0.5, 0.5), ncol = 4,
            handlelength = 0.7, frameon = False)
plt.show()

```

</br>

### Focus
This palette should be used when you want to highlight specific elements to help users understand the information.

<table style="width:80%">
  <tr>
    <th style="background-color: #D9EDF7">Colour name </th>
    <th style="background-color: #D9EDF7">Hex code </th>
    <th style="background-color: #D9EDF7">RGB code </th>
    <th style="background-color: #D9EDF7">Colour fill </th>
  </tr>
  <tr>
    <td>Dark blue </td>
    <td>#12436D </td>
    <td>(18, 67, 109) </td>
    <td style="background-color: #12436D; border-bottom: 1px solid white"></td>    
  </tr>
  <tr>
    <td>Grey </td>
    <td>#BFBFBF </td>
    <td>(191, 191, 191) </td>
    <td style="background-color: #BFBFBF; border-bottom: 1px solid white"></td>    
  </tr>
</table>

<br>

#### Figure 5: Line chart using the Focus colour palette

![](figures/figure5.svg)

This line chart uses data based on the <a href="https://www.kaggle.com/datasets/iamsouravbanerjee/world-population-dataset?resource=download">world population dataset</a>. It shows
the change in population of various countries over time as five lines, of which four are a uniform light grey, and one is a dark blue, serving to highlight the data.

```{python}
#| eval: false

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from py_af_colours import af_colours

world_population = pd.read_csv("data\world_population_in_billions.csv")
top_five = world_population[0:5]
top_five_data = top_five.set_index("Country/Territory")

focus_country = "India"
focus_colours = af_colours("focus")
focus_index = top_five.index[top_five["Country/Territory"] 
                                  == focus_country].tolist()
focus_palette = int(top_five_data.shape[0]) * [focus_colours[1]]
focus_palette[focus_index[0]] = focus_colours[0]
focus = sns.color_palette(focus_palette)

fig, ax = plt.subplots()

sns.lineplot(data = top_five_data.transpose(), 
                    palette = focus,
                    dashes = False,
                    legend = False)

ax.set_xlabel("Year")
ax.set_ylabel("Population (Billion)", rotation = 0)
ax.yaxis.set_label_coords(-0.15, 1.05)

ax.grid(visible = True, which = "both", axis = "y", color = "#D6D6D6")
ax.set_axisbelow(True)
ax.set_frame_on(False)
ax.tick_params(color = "#D6D6D6")

x_coord = len(top_five.columns) - 2
y_coord = []
for n in np.arange(top_five_data.shape[0]):
    y = top_five_data.values[n][-1]
    y_coord.append(y)

ax.annotate(" China", xy = (x_coord, y_coord[0]))
ax.annotate(" India", xy = (x_coord, y_coord[1] - 0.04))
ax.annotate(" United States", xy = (x_coord, y_coord[2] + 0.01))
ax.annotate(" Indonesia", xy = (x_coord, y_coord[3]))
ax.annotate(" Pakistan", xy = (x_coord, y_coord[4] - 0.02))

ax.set_xlim(left = 0, right = (len(top_five.columns) - 2))
ax.set_ylim(bottom = -0.01, top = 1.6)

plt.tight_layout()
plt.show()

```

<br>

## Maintenance
In the event of future updates to the colours, they will be updated in the config file.

This page will undergo changes as the package is updated.